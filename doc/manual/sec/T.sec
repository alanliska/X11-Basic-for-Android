##############################################################################
Function: TALLY()
Syntax:   a%=TALLY(t$,s$[,start%])

DESCRIPTION:

	TALLY() returns the number of occurrences of s$ in t$, 
	starting at the given position start% in t$.
	If s$ is not present in t$, zero is returned.

EXAMPLE:
	PRINT TALLY("Hello","l")    ! Result: 2

SEE ALSO: INSTR()
##############################################################################
Function: TAN()
Syntax:   b=TAN(a)

DESCRIPTION:

	Returns the tangens of the expression in radians.

SEE ALSO: SIN(), ATAN(), TANH()
##############################################################################
Function: TANH()
Syntax:   b=TANH(a)

DESCRIPTION:

	Returns the tangens hyperbolicus of the expression in radians.

SEE ALSO: SIN(), ATANH(), TAN()
##############################################################################
Variable:   TERMINALNAME$
Syntax:     a$=TERMINALNAME$

DESCRIPTION:

	Returns the device name of the terminal connected to the 
	stdout standard output (if a terminal device is connected).

EXAMPLE:

	PRINT TERMINALNAME$
	Result: /dev/pts/0


*#############################################################################
Function: TERMINALNAME$()
Syntax:   t$=TERMINALNAME$(#n)

DESCRIPTION:

	Returns the device name of the terminal connected to file #n if it 
	is a terminal device.

##############################################################################
Command:  TEXT
Syntax:   TEXT x,y,t$ 

DESCRIPTION:

	Draws text t$ in graphics window at position x,y. The size and angle
	of the text is defined by the font used (SETFONT) and by the 
	definitions made with DEFTEXT. GRAPHMODE determines is the font is
	drawn with a solid or transparent background.

EXAMPLE:

' Show the complete ASCII Font
SETFONT "*writer*18*"
COLOR GET_COLOR(65535,10000,10000)
FOR x=0 to 15
  FOR y=0 to 15
    TEXT 320+16*y,20+24*x,CHR$(y+16*x)
  NEXT y
NEXT x
SHOWPAGE

SEE ALSO: SETFONT, DEFTEXT, GRAPHMODE
##############################################################################
Variable:   TIME$
Syntax:     a$=TIME$

DESCRIPTION:

	Returns the system time as a string.
        Format: hh:mm:ss and is updated every second.

EXAMPLE:

	PRINT TIME$,DATE$   ! 14:49:44        11.03.2014

SEE ALSO: DATE$, TIMER, UNIXTIME$()
##############################################################################

Variable: TIMER
Syntax:   TIMER

DESCRIPTION:

	Returns actual time in number of seconds since 01.01.1970 00:00 GMT. 
	The value has milliseconds resolution. TIMER is often used to measure
	times.

EXAMPLE:
n%=1000000
DIM t$(n%),u%(n%)
t=TIMER
PRINT "filling the string array with ";n%;" strings ..."
FOR i%=0 TO n%-1
  t$(i%)=STR$(RANDOM(n%))
  u%(i%)=i%
NEXT i%
PRINT "this took ";TIMER-t;" seconds."
END

SEE ALSO: STIMER, CTIMER, TIME$, DATE$, UNIXTIME$(), UNIXDATE$()
##############################################################################

Command:  TITLEW
Syntax:   TITLEW n,title$

DESCRIPTION: 

         Gives the window #n the new title title$. 

SEE ALSO: OPENW, INFOW

##############################################################################

Command:  TOPW
Syntax:   TOPW [n]

DESCRIPTION: 

         Activates the windows number n and moves it to the front of
	 the screen.
	 

SEE ALSO: BOTTOMW, MOVEW
##############################################################################

Command:  TOUCH
Syntax:   TOUCH #n

DESCRIPTION:
	Updates the date and time stamps of a file, giving it the current 
	system time and date.

EXAMPLE:
    	OPEN "U",#1,"test.txt"
        TOUCH #1
        CLOSE #1

SEE ALSO: OPEN, CLOSE
##############################################################################
Variable:   TRACE$
Syntax:     a$=TRACE$

DESCRIPTION:

	The variable TRACE$ contains the command which is next to 
	be processed.

EXAMPLE:
	PRINT TRACE$      ! Result: END
	END

SEE ALSO: TRON, TROFF, PC
##############################################################################
Function: TRIM$()
Syntax:   b$=TRIM$(a$)

DESCRIPTION:

	TRIM$(a$) returns a modified string taken a$

	1. replace Tabs by space,
        
	2. replace double spaces by single ones ,
        
	3. remove leading and trailing spaces.
        
	4. Parts of the string which are in quotes ("") will not be changed.


SEE ALSO: XTRIM$(), REPLACE$()
##############################################################################

Command:  TROFF 
Syntax:   TROFF 
DESCRIPTION: 

	TROFF disables tracing output. This command is meant to be used
	during program development.

SEE ALSO: TRON, ECHO

##############################################################################

Command:  TRON
Syntax:   TRON

DESCRIPTION:

	TRON enables tracing output: each program line is displayed on the 
	console before it is executed. This command is meant to be used during 
	program development.

SEE ALSO: TROFF, ECHO
##############################################################################

Variable:   TRUE 
Syntax:     TRUE
  	  
DESCRIPTION:

	Constant -1. This is simply another way of expressing
        the value of a condition when it is true and is equal
        to -1 (all bits not zero).

SEE ALSO: FALSE
##############################################################################
Function: TRUNC()
Syntax:   a=TRUNC(x)

DESCRIPTION:

	TRUNC() rounds x to the nearest integer not larger in absolute
	value.  TRUNC complements FRAC:
----*
            TRUNC(x)=x-FRAC(x)
*----
SEE ALSO: FRAC(), FLOOR(), FIX()
##############################################################################
Function: TYP?()
Syntax:   a%=TYP?(<var>)

DESCRIPTION:

	Returns the type of a variable. 
----*
     0 -- invalid
     1 -- 32 bit integer
     2 -- 64 bit floating point
     3 -- big integer
     4 -- ARBFLOATTYP
     5 -- complex 
     6 -- ARBCOMPLEXTYP
     7 -- String
    +8 -- Array of typ 0-7
   +32 -- it is a constant of typ 0-7
*---- 

COMMENT: 
	This function is nearly useless. It only shows internals of X11-Basic.

EXAMPLES:

 PRINT typ?(a)  -> 2
 PRINT typ?(a$) -> 7
 PRINT typ?(a())-> 10

##############################################################################
