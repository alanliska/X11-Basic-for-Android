##############################################################################

Command:  ECHO
Syntax:   ECHO ON
          ECHO OFF

DESCRIPTION:

	Switches the trace function on or off. This causes each command to 
        be listed on the stdout.

SEE ALSO: TRON, TROFF

##############################################################################

Command:  EDIT
Syntax:   EDIT 

DESCRIPTION:

	EDIT invokes the standard editor (given by the environment variable 
	$(EDITOR) to edit the BASIC program in memory. 
	
	The command invokes the following actions:
----*
SAVE "name.~~~" writes the BASIC-program into a temporary file, 
calls the editor '$EDITOR'
                waits until editor is closed   
NEW             clears internal values
LOAD "name.~~~" reads the BASIC-program from the temporary file. 
*----
	You may want to SAVE the file before using the EDIT command if the file
	has not yet been saved in order to choose  a  name at  that  occasion. 
	The default name is "name.~~~". This command requires that the editor
	installed on  your  system  does  not  detach itself from the calling
	process or EDIT will not recognize any changes (in that case, use LOAD
	to load the modified source code).

SEE ALSO: LOAD, SAVE
##############################################################################

Command:  ELLIPSE
Syntax:   ELLIPSE <x>,<y>,<a>,<b> [,<w0>,<w1>]

DESCRIPTION:

	Draws an ellipse at <x>,<y>, having <a> as  horizontal radius and <b>
	vertical radius The optional angles <w0> and <w1> give start and end
	angles in degrees, to create an elliptical arc.

SEE ALSO: PELLIPSE, CIRCLE

##############################################################################

Command:  ELSE, ELSE IF
Syntax:   ELSE 
	  ELSE IF <expression>
DESCRIPTION:

	ELSE IF  <expression>  introduces another  condition  block  and 
	the  unqualified  ELSE  introduces the default condition block in a
	multi-line IF statement. 

EXAMPLE:       
       IF (N=0)
           PRINT "0"
       ELSE IF (N=1)
           PRINT "1"
       ELSE
           PRINT "Out of range"
       ENDIF

SEE ALSO:  IF, ENDIF

##############################################################################
Function:    ENCLOSE$()
Syntax:     e$=ENCLOSE$(t$[,c$])

DESCRIPTION:

	Encloses a string. With a character or a pair of characters.
	The default pair is "".

EXAMPLE:
       PRINT enclose$("abc","()")  !   Result: (abc)
       PRINT enclose$("Hello","-") !   Result: -Hello-

SEE ALSO:   DECLOSE$()
##############################################################################
Function:    ENCRYPT$()
Syntax:     e$=ENCRYPT$(t$,key$[,typ%])

DESCRIPTION:

	This Function will encrypt a string with a given key. Typ% specifies, 
	which algorithm is used. If typ% is not specified, the blowfish 
	algorithm is used. 
	
	The encrypted message can be decrypted again using DECRYPT$() and the
	same key (or, in case it was encrypted with a public key, it must be 
	decrypted with the corresponding private key.) The encrypted message 
	has always the same length than the original message.
	
	Following algorithms can be used:
----*
	Typ%=
	    1    ! IDEA
            2    ! 3DES
            3    ! CAST5
            4    ! BLOWFISH
            5    ! SAFER_SK128
            6    ! DES_SK
            7    ! AES
            8    ! AES192
            9    ! AES256
           10    ! TWOFISH
          301    ! ARCFOUR Fully compatible with RSA's RC4 (tm).
          302    ! DES this is single key 56 bit DES.
          303    ! TWOFISH128
          304    ! SERPENT128
          305    ! SERPENT192
          306    ! SERPENT256
          307    ! RFC2268_40 Ron's Cipher 2 (40 bit).
          308    ! RFC2268_128 Ron's Cipher 2 (128 bit). 
          309    ! SEED    128 bit cipher described in RFC4269.
          310    ! CAMELLIA128
          311    ! CAMELLIA192
          312    ! CAMELLIA256
	  
          501    ! RSA
          516    ! ELG_E
          517    ! DSA
          520    ! ELG
          801    ! ECDSA
          802    ! ECDH
*----

COMMENT: 
  	This function is only available if libgcrypt was compiled in.


SEE ALSO:   COMPRESS$(), DECRYPT$()
##############################################################################
Command:    END
Syntax:     END

DESCRIPTION:

	END  terminates  program  execution. The interpreter switches to 
	interactive mode.

SEE ALSO:   STOP, QUIT
##############################################################################

Command:    ENDFUNCTION
Syntax:     ENDFUNCTION

DESCRIPTION:

	Terminates a user defined function block. The function itself must 
	return a value with a RETURN command.

SEE ALSO:   FUNCTION, RETURN

##############################################################################

Command:    ENDIF
Syntax:     ENDIF

DESCRIPTION:

	ENDIF terminates a multi-line IF block.

SEE ALSO: IF, ELSE, ELSE IF

##############################################################################

Command:    ENDPROCEDURE
Syntax:     ENDPROCEDURE

DESCRIPTION:

	Terminates a user defined procedure. It has the same effect as 
	RETURN.

SEE ALSO:   RETURN, ENDFUNCTION
##############################################################################

Command:    ENDSELECT
Syntax:     ENDSELECT

DESCRIPTION:

	Terminates a SELECT block.

SEE ALSO: SELECT, DEFAULT, CASE

##############################################################################

Command:    ENV$()
Syntax:     a$=ENV$(name$)

DESCRIPTION:

	ENV$() returns the current value of the specified "environment 
	variable". Environment variables are string variables maintained by the
	operating system.  These variables typically are used to save 
	configuration information.  Use the SETENV command to set the values
	of environment variables.
	
	
COMMENT: 
	In Unix and Unix-like systems, the names of environment variables are 
	case-sensitive. 

EXAMPLE:
        PRINT ENV$("USER")  !  Result: hoffmann
        PRINT ENV$("HOST")  !  may return the name of the computer
        PRINT ENV$("PWD")   !  may return the current working directory

SEE ALSO: SETENV
##############################################################################

Function:    EOF()
Syntax:      a=EOF(#<dev-number>)

DESCRIPTION:

	EOF() checks the end-of-file status of a file previously opened for
	reading by the OPEN command. It returns -1 (TRUE) if the end of file
	has been reached, otherwise null (FALSE).

EXAMPLE:
        OPEN "I",#1,"filename"
        WHILE NOT EOF(#1)
            LINEINPUT #1,a$
        WEND
        CLOSE #1

SEE ALSO: OPEN

##############################################################################

Operator:   EQV
Syntax:     a=<num-expression> EQV <num-expression>

DESCRIPTION:

	The operator EQV (equivalence) produces a TRUE result only if the 
	arguments of both are either TRUE or both  FALSE.  (same as NOT(x XOR
	y)) and ((A IMP B) AND (B IMP A)).
	
----*
table:     A  |  B  |  A EQV B
         -----+-----+----------
          -1  | -1  |   -1
          -1  |  0  |    0
           0  | -1  |    0
           0  |  0  |   -1
*----

EXAMPLE:
         PRINT BIN$((15 EQV 6) and 15,4) 
         Result:  0110
 
SEE ALSO: TRUE, FALSE, NOT, XOR, IMP

##############################################################################
Command:    ERASE
Syntax:     ERASE <array>()[,<array>(),<variable>...]

DESCRIPTION:

	un-DIMs an array and removes it from the internal variables. Or 
	remove a variable out of the memory. (This command need never be used
	in X11-Basic. Don't use it. An array can easily re-dimensioned with 
	another DIM statement.)

SEE ALSO: DIM, CLR
##############################################################################

Variable:   ERR
Syntax:     ERR

DESCRIPTION:

	Returns the error code of latest occurred error.

SEE ALSO: ERROR, ERR$()

##############################################################################

Function:   ERR$()
Syntax:     a$=ERR$(<error-nr>)

DESCRIPTION:

	Returns, as a string containing the X11-Basic error message which
	belongs to the error number. 

EXAMPLE:

PRINT "X11-Basic Error messages:"
FOR i=0 TO 255
  PRINT i,ERR$(i)
NEXT i

SEE ALSO: ERR

##############################################################################

Command:    ERROR
Syntax:     ERROR <error-number>

DESCRIPTION:

       ERROR simulates an error, i.e., displays the message  appropriate for a
       given error code or calls the error handler if one was installed via the
       ON ERROR command. This command is helpful in  writing  ON  ERROR  GOSUB 
       routines  that  can identify errors for special treatment and then ERROR
       ERR (i.e. default handling)  for  all others. 

EXAMPLE:

> ERROR 245
Line -1: * Timeout


SEE ALSO:       ON ERROR GOSUB, ERR

##############################################################################
Command:    EVAL
Syntax:     EVAL a$

DESCRIPTION:

	Evaluate or execute X11-Basic command, which is in a$.
	
EXAMPLE:

b$="a=5"
a$="print a"
EVAL a$
EVAL b$
EVAL a$
&a$      ! short form

SEE ALSO: EVAL()
*#############################################################################
Function:    EVAL()
Syntax:      a=EVAL(b$)

DESCRIPTION:

	Evaluate expression, which is in b$.
	
EXAMPLE:

b$="sin(0.5*exp(0.001))"
result=EVAL(b$)

result=&b$     ! short form

SEE ALSO: EVAL
##############################################################################
Function:   EVEN()
Syntax:     e%=EVEN(<num-expression>)

DESCRIPTION:

	Returns true (-1) if the number is even, else false (0).

SEE ALSO: ODD()
##############################################################################
Command:   EVENT
Syntax:    EVENT typ,[x,y,xr,yr,s,k,ks,t$,timestamp]

DESCRIPTION:

	EVENT waits for an event of the graphics i/o system. This very 
	powerful command can wait for a big variaty of different user 
        events which can occur.
        
	Following events can be watched for: 
----*
	- A mouse button is pressed or released, 
	- A key on the keyboard is pressed or released, 
	- The mouse pointer has moved to a new position.
	- The graphics window was clicked to be opened, 
          closed or iconified.
*----
	typ determines which of the events have occured:
----*	
	typ=2     --- key pressed 
	typ=3     --- key released
	typ=4     --- mouse button pressed
	typ=5     --- mouse button released
	typ=6     --- mouse motion event
	typ=10    --- Window move event
	typ=13    --- Window resize event

	x,y       --- Mouse position relative to window
	xr,yr     --- Mouse position relative to screen or 
                      relative movement
	s         --- State of the Alt, Caps, Shift keys
	k         --- state of the mouse buttons or keycode
	ks        --- scancode of key
	t$        --- Character of pressed key
	timestamp --- timestamp of the time the event occured (in ms)
*----

SEE ALSO: KEYEVENT, MOUSEEVENT, MOTIONEVENT, EVENT?()
##############################################################################
Command:   EVENT?()
Syntax:    a=EVENT?(mask%)

DESCRIPTION:

	Returns TRUE if a graphics event is pending which matches the 
	types given by mask.
----*
    mask=       1 --- key press event
    mask=       2 --- key release event
    mask=       4 --- mouse button press event
    mask=       8 --- mouse button release event
    mask=    0x10 --- mouse enters window event
    mask=    0x20 --- mouse leaves window event
    mask=    0x40 --- mouse motion event
    mask= 0x40000 --- window resize events
    mask=0x200000 --- window focus change events
*----

SEE ALSO: EVENT, KEYEVENT, MOUSEEVENT, MOTIONEVENT, INP?()
##############################################################################

Command:    EVERY
Syntax:     EVERY <seconds>, <procedure>
	    EVERY CONT
	    EVERY STOP

DESCRIPTION:

	The command EVERY causes the procedure to be called every <seconds>
	seconds. Using EVERY STOP, the calling of a procedure can be 
	prevented. With EVERY CONT this is again allowed. 

COMMENT: 
	EVERY CONT and EVERY STOP are currently not implemented. Please
	also read the comments about AFTER.

EXAMPLE:

EVERY 1,progress
q=10000000
FOR p=0 TO q
  a=(1+a)/2
NEXT p
AFTER 1,progress  ! To stop the progress
PAUSE 3           ! will be interrupted after 1 second
PRINT "done -->";a
END
PROCEDURE progress
  PRINT p/q;"% done."
RETURN


SEE ALSO: AFTER

##############################################################################

Command: EXEC
Syntax:  EXEC name$[,commandline$[,environment$]]
         EXEC action$[,data$[,extra$]]

DESCRIPTION:

	Calls an operating system service by name. The behavior is different on 
	different operating systems.  

	The first argument for EXEC is the name of a file or a service that is 
	to be executed.

	If name$ is not an android-intent, the system searches for an executable
	file if the specified filename does not  contain  a slash  (/) 
	character.

	The  file  is  sought in the colon-separated list of directory
	pathnames  specified in the PATH environment variable.  If this variable
	isn't defined, the path list defaults to the current directory followed
	by the  list of directories "/bin:/usr/bin".

        If the specified filename includes a slash character, then PATH is 
	ignored, and the file at the specified pathname is executed.
	
	The filename must be either a binary executable, or a script starting 
	with a line of the form:
----*
           #! interpreter [optional-arg]
*----


	In case, name$ is not an android intent, 
	EXEC replaces the current process image with a new process 
	image and execute it. So EXEC will not return to the X11-Basic program.
	
	The following string argument describes a list of one  or  more
	arguments  available to the executed program. The Arguments must be
	separated by a newline  character (CHR$(10)).

	The second string argument allows the caller to specify the
        environment of the executed program. The environment 
        consists of a list of strings of format VAR=CONTENT, separated  
        by a newline character (CHR$(10)).
       
        If this argument is not present, EXEC takes the environment
        for the new process image from the calling process.
	
	On Android:
	
	If the name starts with "android.intent", a special operating system 
	service, called INTENT is called.
	Following intents are currently available:

----*
	android.intent.action.EDIT   --- call a text editor
	android.intent.action.SEND   --- call email client	
	android.intent.action.VIEW   --- call browser
	android.intent.action.DIAL   --- call phone
*----

	Execution will continue in X11-Basic as soon as the intent has finished.
	If you need a return value to find out if the intent was successful, use
	EXEC().

EXAMPLE: 
	EXEC "env","-u"+chr$(10)+"A","HOME=/tmp"+chr$(10)+"A=0"
	EXEC "android.intent.action.VIEW",\
	      "text/html:http://x11basic.sourceforge.net/"
	EXEC "android.intent.action.EDIT","text/plain:new.bas"
	EXEC "android.intent.action.SEND","message/rfc822:", \
	"android.intent.extra.EMAIL=my@email.adr"+chr$(10)+\
	"android.intent.extra.SUBJECT=Hello"

SEE ALSO: SYSTEM, EXEC(), CALL, SHELL

*##############################################################################

Function: EXEC()
Syntax:   a%=EXEC(name$[,commandline$[,environment$]])
          r%=EXEC(action$[,data$[,extra$]])

DESCRIPTION:

	Does the same as the command EXEC, but returns a return value. This is
	either the value passed to the system exit() function or the result of
	an intent.

EXAMPLE:
	a=EXEC("android.intent.action.EDIT","text/plain:new.bas")
	if a=-1
	  print "OK."
	else if a=0
	  print "CANCELED"
	endif	
        b=EXEC("/usr/bin/busybox","/usr/bin/busybox"+chr$(10)+"-c","HOME=/tmp")
	if b<>0
	  print "program exited with return code: ";b
	endif

SEE ALSO: CALL(), EXEC, SYSTEM$()

##############################################################################

Function:   EXIST()
Syntax:     a=EXIST(filename$)

DESCRIPTION:

	Returns TRUE (-1) if the file exists on the file system. 
	
	
SEE ALSO: OPEN
#############################################################################
Command:    EXIT
Syntax:     EXIT

DESCRIPTION:

	EXIT will either exit a loop, return from a procedure or
	subroutine, quit a SELECT/ENDSELECT structure, or quit the interpreter.
	WHILE, REPEAT, DO and FOR loops can be aborted prematurely with the EXIT 
        command. Here it has the same function as BREAK. EXIT leaves the current
        (innermost) loop immediately. Outside a loop, but insidde a procedure
	or function, that procedure or function is left, like with RETURN.
	Outside any procedure or function or loop, or invoked from the direct mode
	EXIT has the same effect like QUIT.
	
SEE ALSO:  EXIT IF, BREAK, RETURN, QUIT	
#############################################################################
Command:    EXIT IF
Syntax:     EXIT IF <expression>

DESCRIPTION:

	The innermost loop will be left if the expression is true.
	WHILE, REPEAT, DO and FOR loops can be aborted prematurely with the 
        EXIT IF statement. EXIT IF leaves the current (innermost) loop immediately, 
        if the expression after EXIT IF is not FALSE (not null).

COMMENT:
        EXIT IF cannot be used in direct mode. 

SEE ALSO:  DO, WHILE, FOR, REPEAT, BREAK, IF, EXIT
##############################################################################

Function:   EXP()
Syntax:     a=EXP(b)
            a#=EXP(b#)
DESCRIPTION:

	EXP() returns the exponential value of its argument (e to  the 
	specified power).

EXAMPLE:
       PRINT EXP(1)      ! Result: 2.718281828459
       PRINT EXP(1+1i)   ! Result: (1.468693939916+2.287355287179i)
       
SEE ALSO:    LOG(), LN(), LOGB()
##############################################################################

Function:   EXPM1()
Syntax:     a=EXPM1(x)
DESCRIPTION:

	Returns a value equivalent to `exp(x)-1'.  It
        is computed in a way that is accurate even if the value of
        x is near zero -- a case where `exp(x)-1' would be inaccurate  
	due to subtraction of two numbers that are nearly
        equal.

EXAMPLE:
       PRINT EXPM1(1)    !    Result: 1.718281828459
       
SEE ALSO: LOG1P(), EXP()
##############################################################################
